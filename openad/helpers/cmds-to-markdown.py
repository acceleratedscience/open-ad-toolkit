"""
This function exports all available commands to a markdown file
which can then be included in the just-the-docs documentation.

Run:

    python3 openad/helpers/cmds-to-md.py

Find the generated markdown file on the root level of the repo
and move it to the just-the-docs folder:

    commands.md

Note: for now just-the-docs is in a separate repo.
"""

import os
import glob
import json

from openad.app.main import RUNCMD as cmd_pointer
from openad.app.global_var_lib import _all_toolkits
from openad.core.grammar import load_toolkit
from openad.core.grammar import statement_builder
from openad.toolkit.toolkit_main import Toolkit


import pprint


def cmds_to_markdown():
    output = ""

    # Just-the-docs markdown context
    context = (
        "---",
        "title: Commands",
        "layout: home",
        "nav_order: 4",
        "---",
    )
    output += "\n".join(context) + "\n\n"

    # Intro comment
    comment = (
        "This file auto-generated by cmds_to_markdown() and is meant for just-the-docs.",
        "To regenerate it, please see openad/helpers/cmds-to-markdown.py for documentation.",
    )
    comment = "\n".join(comment)
    output += f"<!-- {comment} -->" + "\n\n"

    # Parse main commands
    output += f"## OpenAD\n\n"
    cmds = cmd_pointer.current_help.help_current
    cmds_organized = _organize(cmds)
    output += compile_markdown(cmds_organized)

    # Parse tookit commands
    for toolkit_name in _all_toolkits:
        output += f"## {toolkit_name}\n\n"
        toolkit = _load_toolkit(toolkit_name)
        toolkit_cmds = toolkit.methods_help
        toolkit_cmds_organized = _organize(toolkit_cmds)
        output += compile_markdown(toolkit_cmds_organized)

    # print(output)
    # Get the path of this python file's parent folder
    repo_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

    # Write output to file to this python file's parent folder
    with open(f"{repo_path}/commands.md", "w") as f:
        f.write(output)


def compile_markdown(cmds_organized):
    output = ""
    output += '<details markdown="block">\n'
    output += "<summary>See commands</summary>\n\n"
    for category in cmds_organized:
        output += f"### {category}\n\n"
        for cmd_str, cmd_description in cmds_organized[category]:
            output += f"`{cmd_str}`{{: .cmd }}\n{cmd_description}<br><br>\n\n"
        output += "<br>\n\n"
    output += "</details>\n\n"
    return output


def _organize(cmds, toolkit_name=None):
    commands_organized = {}

    # Organize commands by category.
    for cmd in cmds:
        # Get command string.
        cmd_str = cmd["command"]
        cmd_description = cmd["description"]

        if "parent" in cmd and cmd["parent"]:
            cmd_str = "  -> " + cmd_str

        # Get category.
        category = cmd["category"] if "category" in cmd else "Uncategorized"

        # Organize by category.
        if category in commands_organized:
            commands_organized[category].append((cmd_str, cmd_description))
        else:
            commands_organized[category] = [(cmd_str, cmd_description)]

    return commands_organized


def _load_toolkit(toolkit_name):
    the_toolkit = Toolkit(toolkit_name)

    for i in glob.glob("openad/user_toolkits/" + toolkit_name + "/**/func_*.json", recursive=True):
        func_file = open(i, "r", encoding="utf-8")
        x = json.load(func_file)
        statement_builder(the_toolkit, x)

    # pprint.pprint('toolkit_name:' + str(the_toolkit.toolkit_name))
    # print('\n\n')
    # pprint.pprint('toolkit_description:' + str(the_toolkit.toolkit_description))
    # print('\n\n')
    # pprint.pprint('methods:' + str(the_toolkit.methods))
    # print('\n\n')
    # pprint.pprint('methods_grammar:' + str(the_toolkit.methods_grammar))
    # print('\n\n')
    # pprint.pprint('methods_execute:' + str(the_toolkit.methods_execute))
    # print('\n\n')
    # pprint.pprint('methods_help:' + str(the_toolkit.methods_help))
    # print('\n\n')
    # pprint.pprint('methods_dict:' + str(the_toolkit.methods_dict))
    # print('\n\n')
    # pprint.pprint('methods_library:' + str(the_toolkit.methods_library))
    # print('\n\n')

    # for cmd in the_toolkit.methods_help:

    #     cmd_str = cmd["command"]
    #     cmd_description = cmd["description"]
    #     cmd_category = cmd["category"]

    #     print(cmd_str)
    #     # print(cmd_description)
    #     print(cmd_category)
    #     print('\n')

    return the_toolkit


cmds_to_markdown()
# _load_toolkit_cmds('RXN')
