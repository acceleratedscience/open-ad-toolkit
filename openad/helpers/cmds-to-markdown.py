"""
This function exports all available commands to a markdown file
which can then be included in the just-the-docs documentation.

Run:

    python3 openad/helpers/cmds-to-markdown.py

Find the generated markdown file on the root level of the repo
and move it to the just-the-docs folder:

    commands.md

Note: for now just-the-docs is in a separate repo.
"""

import os
import re
import glob
import json

from openad.app.main import RUNCMD as cmd_pointer
from openad.app.global_var_lib import _all_toolkits
from openad.core.grammar import statement_builder
from openad.toolkit.toolkit_main import Toolkit
from openad.plugins.style_parser import tags_to_markdown


import pprint


def cmds_to_markdown():
    output = []  # Markdown
    toc = []  # Table of content

    # Just-the-docs markdown context
    context = (
        "---",
        "title: Commands",
        "layout: home",
        "nav_order: 4",
        "---",
    )
    output.append("\n".join(context) + "\n")

    # Intro comment
    comment = (
        "This file auto-generated by cmds_to_markdown() and is meant for just-the-docs.",
        "To regenerate it, please see openad/helpers/cmds-to-markdown.py for documentation.",
    )
    comment = "\n".join(comment)
    output.append(f"<!-- {comment} -->" + "\n")

    # Parse main commands
    output.append(f"## OpenAD\n")
    toc.append(_toc_link("OpenAD"))
    cmds = cmd_pointer.current_help.help_current
    cmds_organized = _organize(cmds)
    compile_markdown(output, toc, cmds_organized)

    # Parse tookit commands
    for toolkit_name in _all_toolkits:
        output.append(f"## {toolkit_name}\n\n")
        toc.append(_toc_link(toolkit_name))
        toolkit = _load_toolkit(toolkit_name)
        toolkit_cmds = toolkit.methods_help
        toolkit_cmds_organized = _organize(toolkit_cmds)
        compile_markdown(output, toc, toolkit_cmds_organized)

    # print(output)
    # Get the path of this python file's parent folder
    repo_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

    # Write output to file to this python file's parent folder
    toc = "### Table of Contents\n" + "\n".join(toc) + "\n"
    output = output[:2] + [toc] + output[2:]
    output = "\n".join(output)
    with open(f"{repo_path}/commands.md", "w") as f:
        f.write(output)


def compile_markdown(output, toc, cmds_organized):
    output.append('<details markdown="block">')
    output.append("<summary>See commands</summary>\n")
    for category in cmds_organized:
        output.append(f"### {category}\n")
        toc.append(_toc_link(category, 1))
        for cmd_str, cmd_description in cmds_organized[category]:
            output.append(f"`{cmd_str.strip()}`{{: .cmd }}\n{_parse_description(cmd_description)}<br><br>\n")
        output.append("<br>\n")
    output.append("</details>\n")


def _parse_description(description):
    description = tags_to_markdown(description)
    description = description.replace("<br><br>", "<br>\n")
    description = description.replace("<br>", "\n")
    # description = re.sub(r"<(.*?)>", r"`<\1>`", description)
    # description = re.sub(r"(?<!`)(')?<(.*?)>(')?(?!`)", r"`\1<\2>\3`", description)
    description = re.sub(r"(?<!`')(<.*?>)(?!'`)", r"`\1`", description)
    description = description.splitlines()
    description = "\n".join([line.strip() for line in description])
    return description


def _organize(cmds, toolkit_name=None):
    commands_organized = {}

    # Organize commands by category.
    for cmd in cmds:
        # Get command string.
        cmd_str = cmd["command"]
        cmd_description = cmd["description"]

        if "parent" in cmd and cmd["parent"]:
            cmd_str = "  -> " + cmd_str

        # Get category.
        category = cmd["category"] if "category" in cmd else "Uncategorized"

        # Organize by category.
        if category in commands_organized:
            commands_organized[category].append((cmd_str, cmd_description))
        else:
            commands_organized[category] = [(cmd_str, cmd_description)]

    return commands_organized


def _load_toolkit(toolkit_name):
    the_toolkit = Toolkit(toolkit_name)

    for i in glob.glob("openad/user_toolkits/" + toolkit_name + "/**/func_*.json", recursive=True):
        func_file = open(i, "r", encoding="utf-8")
        x = json.load(func_file)
        statement_builder(the_toolkit, x)

    # pprint.pprint('toolkit_name:' + str(the_toolkit.toolkit_name))
    # print('\n\n')
    # pprint.pprint('toolkit_description:' + str(the_toolkit.toolkit_description))
    # print('\n\n')
    # pprint.pprint('methods:' + str(the_toolkit.methods))
    # print('\n\n')
    # pprint.pprint('methods_grammar:' + str(the_toolkit.methods_grammar))
    # print('\n\n')
    # pprint.pprint('methods_execute:' + str(the_toolkit.methods_execute))
    # print('\n\n')
    # pprint.pprint('methods_help:' + str(the_toolkit.methods_help))
    # print('\n\n')
    # pprint.pprint('methods_dict:' + str(the_toolkit.methods_dict))
    # print('\n\n')
    # pprint.pprint('methods_library:' + str(the_toolkit.methods_library))
    # print('\n\n')

    # for cmd in the_toolkit.methods_help:

    #     cmd_str = cmd["command"]
    #     cmd_description = cmd["description"]
    #     cmd_category = cmd["category"]

    #     print(cmd_str)
    #     # print(cmd_description)
    #     print(cmd_category)
    #     print('\n')

    return the_toolkit


# Take a title and turn it into a markdown
# link for the table of contents.
# Foo Bar --> #foobar
def _toc_link(title, level=0):
    dash = "  " * level + "- "
    return f"{dash}[{title}](#{title.replace(' ', '-').lower()})"


cmds_to_markdown()
# _load_toolkit_cmds('RXN')
