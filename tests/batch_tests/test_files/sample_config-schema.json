{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://accelerate.science/schemas/json-editor-demo",
	"title": "JSON Editor Demo",
	"description": "This schema is used to demonstrate the JSON Editor in demo mode: edit_json(demo=True)",
	"type": "object",

	"properties": {
		"about": {
			"type": "string",
			"default": "Something about this file.",
			"description": "Why this JSON file exists."
		},
		"field_types": {
			"type": "object",
			"required": ["string_required"],
			"properties": {
				"anything": {
					"description": "This field has no data type restriction, it can be anything."
				},
				"boolean": {
					"$id": "/schemas/boolean",
					"type": "boolean",
					"default": true,
					"description": "This is a boolean field."
				},
				"string": {
					"$id": "/schemas/string",
					"type": "string",
					"default": "Some default text",
					"description": "This is a string field."
				},
				"string_required": {
					"type": "string",
					"default": "I'm required",
					"description": "This string value cannot be left blank."
				},
				"numbers": {
					"type": "object",
					"properties": {
						"integer": {
							"type": "integer",
							"default": 1,
							"description": "This is an integer field, it cannot have a decimal point."
						},
						"float": {
							"type": "number",
							"default": 1.5,
							"description": "This is an regular number field, it can have a decimal point."
						},
						"multiple_of_3": {
							"type": "number",
							"multipleOf": 3,
							"default": 9,
							"description": "This number must be a multiple of three."
						},
						"min_0": {
							"type": "number",
							"minimum": 0,
							"default": 0,
							"description": "This number must be higher than or equal to zero."
						},
						"min_0_exclusive": {
							"type": "number",
							"exclusiveMinimum": 0,
							"default": 0.001,
							"description": "This number must be higher than zero."
						},
						"max_10": {
							"type": "number",
							"maximum": 10,
							"default": 10,
							"description": "This number must be less than or equal to ten."
						},
						"max_10_exclusive": {
							"type": "number",
							"exclusiveMaximum": 10,
							"default": 9.999,
							"description": "This number must be less than ten."
						},
						"min_max_0_10": {
							"type": "number",
							"minimum": 0,
							"maximum": 10,
							"default": 5,
							"description": "This number must be higher than or equal to zero, and less than or equal to ten."
						},
						"min_max_0_10_exclusive": {
							"type": "number",
							"exclusiveMinimum": 0,
							"exclusiveMaximum": 10,
							"default": 5,
							"description": "This number must be higher than zero, and less than ten."
						}
					}
				},
				"arrays": {
					"type": "object",
					"properties": {
						"basic": {
							"type": "array",
							"default": ["a", { "b": 1 }, 2],
							"description": "This is a basic array that can hold any type of value."
						},
						"type_numbers": {
							"type": "array",
							"items": {
								"type": "number"
							},
							"default": [1,2,3,4,5],
							"description": "This array can only hold numbers."
						},
						"tuple_strict": {
							"type": "array",
							"prefixItems": [
								{ "type": "number" },
								{ "type": "string" },
								{ "type": "string", "enum": ["Road", "Street", "Avenue", "Boulevard"] }
							],
							"items": false,
							"default": [225, "Fifth", "Avenue"],
							"description": "This array is a strict tuple, it can only hold four values: a number, a string, and an enum. No other values are allowed."
						},
						"tuple_loose": {
							"type": "array",
							"prefixItems": [
								{ "type": "number" },
								{ "type": "string" },
								{ "type": "string", "enum": ["Road", "Street", "Avenue", "Boulevard"] }
							],
							"default": [225, "Fifth", "Avenue", "Suite 17"],
							"items": { "type": "string" },
							"description": "This array is a \"loose\" tuple, it can hold any number of string values, but the first four values must be a number, a string, and an enum."
						},
						"2_3_items": {
							"type": "array",
							"minItems": 2,
							"maxItems": 3,
							"default": [1,2,3],
							"description": "This array must contain 1-3 values."
						},
						"containing_number": {
							"type": "array",
							"contains": { "type": "number" },
							"default": [1, "a", "b"],
							"description": "This array must contain at least one number."
						},
						"containing_2_3_numbers": {
							"type": "array",
							"contains": { "type": "number" },
							"minContains": 2,
							"maxContains": 3,
							"default": [1, 2, "a", "b"],
							"description": "This array must contain 2-3 numbers."
						},
						"unique_values": {
							"type": "array",
							"uniqueItems": true,
							"default": [1, 2, 3],
							"description": "This array must contain unique values."
						}
					}
				},
				"object": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string",
							"default": "Some name"
						}
					},
					"description": "This is a basic 'person' object that should have a 'name' property plus any additional properties."
				},
				"enum": {
					"type": "string",
					"enum": ["Option1", "Option2", "Option3"],
					"default": "Option1",
					"description": "This is a case sensitive (default) enum field. The value must be one of the following options: \n- Option1, \n- Option2, \n- Option3"
				},
				"regex": {
					"type": "string",
					"pattern": "^[a-zA-Z0-9_]*$",
					"default": "abc_123",
					"description": "This string can only contain letters, numbers, and underscores."
				},
				"constant": {
					"const": "IBM",
					"default": "IBM",
					"description": "This value cannot be changed."
				},
				"null": {
					"type": "null",
					"default": null,
					"description": "This value can only be null."
				}
			}
		},
		"string_or_number": {
			"type": ["string", "number"],
			"default": "ABC",
			"description": "This field can be a number or a string."
		},
		"invalid_field": {
			"type": "integer",
			"default": "ABC",
			"description": "Invalid values are highlighted when you open the file. You can't save the file until you have corrected this value."
		},
		"default_value": {
			"type": "string",
			"default": "I am the default value.",
			"description": "A default value is used to prepopulate a field when generating a blank JSON from the schema."
		},
		"nested_fields": {
			"type": "object",
			"properties": {
				"level0": {
					"type": "object",
					"properties": {
						"level1": {
							"type": "object",
							"properties": {
								"level2": {
									"type": "object",
									"properties": {
										"level3": {
											"type": "object",
											"properties": {
												"nested_value": {
													"type": "string",
													"default": "Egg",
													"description": "JSON files can have as many levels of nesting as needed."
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"referenced_schema_1": { "$ref": "/schemas/string" },
		"referenced_schema_2": { "$ref": "/schemas/boolean" },
		"templated_schema_1": { "$ref": "#/$defs/temp" },
		"templated_schema_2": { "$ref": "#/$defs/temp" }
	},


	"$defs": {
		"temp": {
			"type": "string",
			"default": "Shared default value",
			"description": "This field is being validated against a templated portion of the schema. This will only make sense when you open the schema file (type :s)."
		}
	}
}
